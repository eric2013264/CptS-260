 CPTS 260 HW3
Eric Chen 11381898

1.

## $a1 = inputString
## $t0 = inputString index
## $t1 = current char
## $t2 = output string index

.text
main:
## display prompt
li $v0, 4			# syscall code for print
la $a0, prompt
syscall
	
## reads string input
li $v0, 8			# syscall code to read string
la $a0, inputString 		# $a0 is address of inputString
li $a1, 64			# you're able to type 63 + 1 NULL
syscall

la $t0, inputString	
la $t2, outputString

LOOP1:
	lb $t1, ($t0)		# load first char from inputString
	beq $t1, '\n', NEXT	# if (char!='\n'), go to next
	sb $t1, 0($t2)		# store byte into array
	addi $t0, $t0, 1 	# increment to next char
	addi $t2, $t2, 1 	# increment outputString as well
	j LOOP1

NEXT:
	la $t0, inputString 	# resets $t0 to starting pos

## again
LOOP2:
	lb $t1, ($t0)
	beq $t1, '\n', DONE
	sb $t1, 0($t2)		
	addi $t0, $t0, 1 	
	addi $t2, $t2, 1 	
	j LOOP2

DONE:
li $v0, 4			# syscall code to print
la $a0, outputString		# address of outputString
syscall

li $v0,10			# end
syscall

.data
inputString: .space 64 		# 64 characters
outputString: .space 130	# 64+64+2 NULL
prompt: .asciiz "Enter String: "

2.

## $t0 = sum
## #t1 = counter

.text
main:
	li $v0, 4			# syscall code for print
	la $a0, prompt
	syscall

	li $t0, 0
	li $t1, 0

LOOP:
	beq $t1, 10, AVERAGE
	li $v0, 5		# syscall code for read int
	syscall
	add $t0, $t0, $v0	# sum ints in $t0
	addi $t1, $t1, 1 	# increment counter
	j LOOP
AVERAGE:
	div $t0, $t1		# sum/10
	mflo $t0
	li $v0, 1		# syscall code to print int
	move $a0, $t0
	syscall
li $v0, 10
syscall
.data
	prompt: .asciiz "Enter ints: "

3.
	
## $s0 = rstr
## $s1 = tstr
## $a0 = word length
## $t0 = word length
## $t1 = add of str[i]
## $t2 = char in str[i]
## $t4 = addr of tstr
## $t3 = addr of str
## $t5 = addr of temp string used to reverse
## $t6 = index of str
## $t7 = index of rstr


.data
str:        .space 1024   	# buffer for input string
tstr:		.space 20	# temp string used to reverse words
rstr:		.space 1024	# final reversed string
prompt:     .asciiz "Enter a string up to 1024 characters\n"
head1:      .asciiz "\nReversed String:  "

.text
main:
li      $v0, 4			# syscall value to print string
la      $a0, prompt
syscall

li      $v0, 8          	# syscall value to read input string
la      $a0, str        	# addr of allocated space for input string is now in $a0
li      $a1, 1024
syscall

    jal findWord
findWord:
la 		$s0, rstr
la		$s1, tstr
addi	$sp, $sp, -12 		# adjust stack pointer to save 3 words
sw		$s0, 8($sp)		# store addr of word reversed string
sw 		$ra, 4($sp)		# store return address	
sw 		$a0, 0($sp)		# save word length

addi	$t3, $a0, 0		# $t3 is addr of user input
addi 	$t4, $s1, 0		# $t4 is addr of tstr
addi 	$t5, $s0, 0		# $t5 is addr of rstr
li 		$t6, 0			# $t6 is the index of str
li		$t0, 0			# $t0 is word length
li 		$t7, 0			# $t7 is the index of rstr

loop:
add 	$t1, $t3, $t6	# $t1 = addr of str[i]
lb		$t2, 0($t1)		# $t2 = char in str[i]
beq 	$t2, $zero, exit# break if its a null 
addi	$a0, $t2, 0		# char to be checked
	
#save values onto stack from temp registers to preserve them
addi    $sp, $sp, -32   # adjust the stack pointer for 8 values
sw 		$t7, 28($sp)	# save index of rstr
sw      $t6, 24($sp)    # save index of str
sw      $t5, 20($sp)    # save addr of str
sw      $t4, 16($sp)    # save addr of tstr
sw      $t3, 12($sp)    # save the addr of str
sb      $t2, 8($sp)     # save the char in str[i]
sw      $t1, 4($sp)     # save the address of str[i] 
sw      $t0, 0($sp)     # save the word length

jal 	isWord
isWord:
addi 	$sp, $sp, -12 	# adjust stack pointer
sw		$s0, 8($sp)		$ save rstr
sw		$ra, 4($sp)		# save value of return addr
sw		$a0, 0($sp)		# save value to check

li      $t0, 32         # $t0 is ascii value for space character
li      $v0, 0          # Set default return to 0, or "not a space character"
bne     $t0, $a0, reverse # if ascii values match, character is a space
li      $v0, 1          # $v0 = 1 means it is a space character
reverse:
	## store word length amount of chars (word length stops when we find a space)
	## into temp string. Next, using the legth and i, reverse the word and store
	## the word into the word reversed string rstr using a loop

## Do until end of the user input string str

## display word reversed string